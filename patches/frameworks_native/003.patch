commit caf04acd1f7c82368025c6b3ae75113d5e60527a
Author: Robert Rozic <rooobertinhooo@gmail.com>
Date:   Sat Feb 1 23:36:41 2014 +0100

    Put flattenable template disabling under define

diff --git a/include/binder/Parcel.h b/include/binder/Parcel.h
index 41902e1..8b72424 100644
--- a/include/binder/Parcel.h
+++ b/include/binder/Parcel.h
@@ -28,7 +28,11 @@
 namespace android {
 
 template <typename T> class LightFlattenable;
+#ifdef STE_HARDWARE
 class Flattenable;
+#else
+template <typename T> class Flattenable;
+#endif
 class IBinder;
 class IPCThreadState;
 class ProcessState;
@@ -102,7 +106,13 @@ public:
     status_t            writeStrongBinder(const sp<IBinder>& val);
     status_t            writeWeakBinder(const wp<IBinder>& val);
     status_t            writeInt32Array(size_t len, const int32_t *val);
+#ifdef STE_HARDWARE
     status_t            write(const Flattenable& val);
+#else
+    template<typename T>
+    status_t            write(const Flattenable<T>& val);
+#endif
+
 
     template<typename T>
     status_t            write(const LightFlattenable<T>& val);
@@ -157,7 +167,12 @@ public:
     const char16_t*     readString16Inplace(size_t* outLen) const;
     sp<IBinder>         readStrongBinder() const;
     wp<IBinder>         readWeakBinder() const;
+#ifdef STE_HARDWARE
     status_t            read(Flattenable& val) const;
+#else
+    template<typename T>
+    status_t            read(Flattenable<T>& val) const;
+#endif
 
     template<typename T>
     status_t            read(LightFlattenable<T>& val) const;
@@ -270,10 +285,18 @@ private:
         virtual status_t unflatten(void const* buffer, size_t size, int const* fds, size_t count) = 0;
     };
 
+#ifndef STE_HARDWARE
+template<typename T>
+#endif
     class FlattenableHelper : public FlattenableHelperInterface {
         friend class Parcel;
+#ifdef STE_HARDWARE
         const Flattenable& val;
         explicit FlattenableHelper(const Flattenable& val) : val(val) { }
+#else
+        const Flattenable<T>& val;
+        explicit FlattenableHelper(const Flattenable<T>& val) : val(val) { }
+#endif
 
     public:
         virtual size_t getFlattenedSize() const {
@@ -286,7 +309,11 @@ private:
             return val.flatten(buffer, size, fds, count);
         }
         virtual status_t unflatten(void const* buffer, size_t size, int const* fds, size_t count) {
+#ifdef STE_HARDWARE
             return const_cast<Flattenable&>(val).unflatten(buffer, size, fds, count);
+#else
+            return const_cast<Flattenable<T>&>(val).unflatten(buffer, size, fds, count);
+#endif
         }
     };
     status_t write(const FlattenableHelperInterface& val);
@@ -308,6 +335,14 @@ public:
 
 // ---------------------------------------------------------------------------
 
+#ifndef STE_HARDWARE
+template<typename T>
+status_t Parcel::write(const Flattenable<T>& val) {
+    const FlattenableHelper<T> helper(val);
+    return write(helper);
+}
+#endif
+
 template<typename T>
 status_t Parcel::write(const LightFlattenable<T>& val) {
     size_t size(val.getFlattenedSize());
@@ -326,6 +361,14 @@ status_t Parcel::write(const LightFlattenable<T>& val) {
     return NO_ERROR;
 }
 
+#ifndef STE_HARDWARE
+template<typename T>
+status_t Parcel::read(Flattenable<T>& val) const {
+    FlattenableHelper<T> helper(val);
+    return read(helper);
+}
+#endif
+
 template<typename T>
 status_t Parcel::read(LightFlattenable<T>& val) const {
     size_t size;
diff --git a/include/gui/IGraphicBufferConsumer.h b/include/gui/IGraphicBufferConsumer.h
index b6a7b7a..cbed2c4 100644
--- a/include/gui/IGraphicBufferConsumer.h
+++ b/include/gui/IGraphicBufferConsumer.h
@@ -39,7 +39,12 @@ class IGraphicBufferConsumer : public IInterface {
 public:
 
     // public facing structure for BufferSlot
+#ifdef STE_HARDWARE
     class BufferItem : public Flattenable {
+#else
+    class BufferItem : public Flattenable<BufferItem> {
+        friend class Flattenable<BufferItem>;
+#endif
         size_t getPodSize() const;
         size_t getFlattenedSize() const;
         size_t getFdCount() const;
diff --git a/include/gui/IGraphicBufferProducer.h b/include/gui/IGraphicBufferProducer.h
index 8f24902..5d7455e 100644
--- a/include/gui/IGraphicBufferProducer.h
+++ b/include/gui/IGraphicBufferProducer.h
@@ -105,7 +105,12 @@ public:
     // and height of the window and current transform applied to buffers,
     // respectively.
 
+#ifdef STE_HARDWARE
     struct QueueBufferInput : public Flattenable {
+#else
+    struct QueueBufferInput : public Flattenable<QueueBufferInput> {
+        friend class Flattenable<QueueBufferInput>;
+#endif
         inline QueueBufferInput(const Parcel& parcel);
         inline QueueBufferInput(int64_t timestamp, bool isAutoTimestamp,
                 const Rect& crop, int scalingMode, uint32_t transform, bool async,
diff --git a/include/ui/Fence.h b/include/ui/Fence.h
index 70078bf..4fdb425 100644
--- a/include/ui/Fence.h
+++ b/include/ui/Fence.h
@@ -36,7 +36,11 @@ namespace android {
 // ===========================================================================
 
 class Fence
+#ifdef STE_HARDWARE
     : public LightRefBase<Fence>, public Flattenable
+#else
+    : public LightRefBase<Fence>, public Flattenable<Fence>
+#endif
 {
 public:
     static const sp<Fence> NO_FENCE;
diff --git a/include/ui/GraphicBuffer.h b/include/ui/GraphicBuffer.h
index 16994bd..3f7114d 100644
--- a/include/ui/GraphicBuffer.h
+++ b/include/ui/GraphicBuffer.h
@@ -41,11 +41,15 @@ class GraphicBuffer
     : public ANativeObjectBase< ANativeWindowBuffer, GraphicBuffer,
 #ifdef STE_HARDWARE
     LightRefBase<GraphicBuffer> >,
+      public Flattenable
 #else
     RefBase >,
+      public Flattenable<GraphicBuffer>
 #endif
-      public Flattenable
 {
+#ifndef STE_HARDWARE
+    friend class Flattenable<GraphicBuffer>;
+#endif
 public:
 
     enum {
diff --git a/libs/binder/Parcel.cpp b/libs/binder/Parcel.cpp
index 5bb0550..2f7a0a8 100644
--- a/libs/binder/Parcel.cpp
+++ b/libs/binder/Parcel.cpp
@@ -808,10 +808,12 @@ status_t Parcel::writeBlob(size_t len, WritableBlob* outBlob)
     return status;
 }
 
+#ifdef STE_HARDWARE
 status_t Parcel::write(const Flattenable& val) {
     const FlattenableHelper helper(val);
     return write(helper);
 }
+#endif
 
 status_t Parcel::write(const FlattenableHelperInterface& val)
 {
@@ -1189,10 +1191,12 @@ status_t Parcel::readBlob(size_t len, ReadableBlob* outBlob) const
     return NO_ERROR;
 }
 
+#ifdef STE_HARDWARE
 status_t Parcel::read(Flattenable& val) const {
     FlattenableHelper helper(val);
     return read(helper);
 }
+#endif
 
 status_t Parcel::read(FlattenableHelperInterface& val) const
 {
